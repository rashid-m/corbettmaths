// Code generated by mockery v1.0.0. DO NOT EDIT.

package externalmocks

import committeestate "github.com/incognitochain/incognito-chain/blockchain/committeestate"
import common "github.com/incognitochain/incognito-chain/common"
import incognitokey "github.com/incognitochain/incognito-chain/incognitokey"
import key "github.com/incognitochain/incognito-chain/privacy/key"
import mock "github.com/stretchr/testify/mock"
import types "github.com/incognitochain/incognito-chain/blockchain/types"

// BeaconCommitteeState is an autogenerated mock type for the BeaconCommitteeState type
type BeaconCommitteeState struct {
	mock.Mock
}

// AssignRuleVersion provides a mock function with given fields:
func (_m *BeaconCommitteeState) AssignRuleVersion() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Backup provides a mock function with given fields: env
func (_m *BeaconCommitteeState) Backup(env *committeestate.BeaconCommitteeStateEnvironment) error {
	ret := _m.Called(env)

	var r0 error
	if rf, ok := ret.Get(0).(func(*committeestate.BeaconCommitteeStateEnvironment) error); ok {
		r0 = rf(env)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clone provides a mock function with given fields:
func (_m *BeaconCommitteeState) Clone() committeestate.BeaconCommitteeState {
	ret := _m.Called()

	var r0 committeestate.BeaconCommitteeState
	if rf, ok := ret.Get(0).(func() committeestate.BeaconCommitteeState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(committeestate.BeaconCommitteeState)
		}
	}

	return r0
}

// GetAllCandidateSubstituteCommittee provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetAllCandidateSubstituteCommittee() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetAutoStaking provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetAutoStaking() map[string]bool {
	ret := _m.Called()

	var r0 map[string]bool
	if rf, ok := ret.Get(0).(func() map[string]bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]bool)
		}
	}

	return r0
}

// GetBCStakingAmount provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetBCStakingAmount() map[string]uint64 {
	ret := _m.Called()

	var r0 map[string]uint64
	if rf, ok := ret.Get(0).(func() map[string]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]uint64)
		}
	}

	return r0
}

// GetBeaconCommittee provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetBeaconCommittee() []incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() []incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetBeaconLocking provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetBeaconLocking() []incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() []incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetBeaconSubstitute provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetBeaconSubstitute() []incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() []incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetBeaconWaiting provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetBeaconWaiting() []incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() []incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetCandidateBeaconWaitingForCurrentRandom provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetCandidateBeaconWaitingForCurrentRandom() []incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() []incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetCandidateBeaconWaitingForNextRandom provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetCandidateBeaconWaitingForNextRandom() []incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() []incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetCandidateShardWaitingForCurrentRandom provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetCandidateShardWaitingForCurrentRandom() []incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() []incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetCandidateShardWaitingForNextRandom provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetCandidateShardWaitingForNextRandom() []incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() []incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetCommitteeChange provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetCommitteeChange() *committeestate.CommitteeChange {
	ret := _m.Called()

	var r0 *committeestate.CommitteeChange
	if rf, ok := ret.Get(0).(func() *committeestate.CommitteeChange); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*committeestate.CommitteeChange)
		}
	}

	return r0
}

// GetDelegate provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetDelegate() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetDelegateState provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetDelegateState() map[string]committeestate.BeaconDelegatorInfo {
	ret := _m.Called()

	var r0 map[string]committeestate.BeaconDelegatorInfo
	if rf, ok := ret.Get(0).(func() map[string]committeestate.BeaconDelegatorInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]committeestate.BeaconDelegatorInfo)
		}
	}

	return r0
}

// GetNumberOfActiveShards provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetNumberOfActiveShards() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetOneShardCommittee provides a mock function with given fields: shardID
func (_m *BeaconCommitteeState) GetOneShardCommittee(shardID byte) []incognitokey.CommitteePublicKey {
	ret := _m.Called(shardID)

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func(byte) []incognitokey.CommitteePublicKey); ok {
		r0 = rf(shardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetOneShardSubstitute provides a mock function with given fields: shardID
func (_m *BeaconCommitteeState) GetOneShardSubstitute(shardID byte) []incognitokey.CommitteePublicKey {
	ret := _m.Called(shardID)

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func(byte) []incognitokey.CommitteePublicKey); ok {
		r0 = rf(shardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetReputation provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetReputation() map[string]uint64 {
	ret := _m.Called()

	var r0 map[string]uint64
	if rf, ok := ret.Get(0).(func() map[string]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]uint64)
		}
	}

	return r0
}

// GetRewardReceiver provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetRewardReceiver() map[string]key.PaymentAddress {
	ret := _m.Called()

	var r0 map[string]key.PaymentAddress
	if rf, ok := ret.Get(0).(func() map[string]key.PaymentAddress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]key.PaymentAddress)
		}
	}

	return r0
}

// GetShardCommittee provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetShardCommittee() map[byte][]incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 map[byte][]incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() map[byte][]incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[byte][]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetShardCommonPool provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetShardCommonPool() []incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 []incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() []incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetShardSubstitute provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetShardSubstitute() map[byte][]incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 map[byte][]incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() map[byte][]incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[byte][]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// GetStakingTx provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetStakingTx() map[string]common.Hash {
	ret := _m.Called()

	var r0 map[string]common.Hash
	if rf, ok := ret.Get(0).(func() map[string]common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]common.Hash)
		}
	}

	return r0
}

// GetSyncingValidators provides a mock function with given fields:
func (_m *BeaconCommitteeState) GetSyncingValidators() map[byte][]incognitokey.CommitteePublicKey {
	ret := _m.Called()

	var r0 map[byte][]incognitokey.CommitteePublicKey
	if rf, ok := ret.Get(0).(func() map[byte][]incognitokey.CommitteePublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[byte][]incognitokey.CommitteePublicKey)
		}
	}

	return r0
}

// Hash provides a mock function with given fields:
func (_m *BeaconCommitteeState) Hash() (*committeestate.BeaconCommitteeStateHash, error) {
	ret := _m.Called()

	var r0 *committeestate.BeaconCommitteeStateHash
	if rf, ok := ret.Get(0).(func() *committeestate.BeaconCommitteeStateHash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*committeestate.BeaconCommitteeStateHash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Restore provides a mock function with given fields: beaconBlocks
func (_m *BeaconCommitteeState) Restore(beaconBlocks []types.BeaconBlock) error {
	ret := _m.Called(beaconBlocks)

	var r0 error
	if rf, ok := ret.Get(0).(func([]types.BeaconBlock) error); ok {
		r0 = rf(beaconBlocks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCommitteeState provides a mock function with given fields: env
func (_m *BeaconCommitteeState) UpdateCommitteeState(env *committeestate.BeaconCommitteeStateEnvironment) (*committeestate.BeaconCommitteeStateHash, [][]string, error) {
	ret := _m.Called(env)

	var r0 *committeestate.BeaconCommitteeStateHash
	if rf, ok := ret.Get(0).(func(*committeestate.BeaconCommitteeStateEnvironment) *committeestate.BeaconCommitteeStateHash); ok {
		r0 = rf(env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*committeestate.BeaconCommitteeStateHash)
		}
	}

	var r1 [][]string
	if rf, ok := ret.Get(1).(func(*committeestate.BeaconCommitteeStateEnvironment) [][]string); ok {
		r1 = rf(env)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([][]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*committeestate.BeaconCommitteeStateEnvironment) error); ok {
		r2 = rf(env)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Upgrade provides a mock function with given fields: _a0
func (_m *BeaconCommitteeState) Upgrade(_a0 *committeestate.BeaconCommitteeStateEnvironment) committeestate.BeaconCommitteeState {
	ret := _m.Called(_a0)

	var r0 committeestate.BeaconCommitteeState
	if rf, ok := ret.Get(0).(func(*committeestate.BeaconCommitteeStateEnvironment) committeestate.BeaconCommitteeState); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(committeestate.BeaconCommitteeState)
		}
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *BeaconCommitteeState) Version() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
